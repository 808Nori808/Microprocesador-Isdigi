// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.


// Generated by Quartus Prime Version 17.1 (Build Build 590 10/25/2017)
// Created on Fri Dec 15 08:48:42 2023

id_ex id_ex_inst
(
	.CLK(CLK_sig) ,	// input  CLK_sig
	.RESET_N(RESET_N_sig) ,	// input  RESET_N_sig
	.PC_ID(PC_ID_sig) ,	// input [size-1:0] PC_ID_sig
	.imm_ID(imm_ID_sig) ,	// input [size-1:0] imm_ID_sig
	.read_data1_ID(read_data1_ID_sig) ,	// input [size-1:0] read_data1_ID_sig
	.read_data2_ID(read_data2_ID_sig) ,	// input [size-1:0] read_data2_ID_sig
	.wrin_ID(wrin_ID_sig) ,	// input [4:0] wrin_ID_sig
	.ALUOp_ID(ALUOp_ID_sig) ,	// input [3:0] ALUOp_ID_sig
	.entrada_alu_control_ID(entrada_alu_control_ID_sig) ,	// input [3:0] entrada_alu_control_ID_sig
	.AuipcLui_ID(AuipcLui_ID_sig) ,	// input [1:0] AuipcLui_ID_sig
	.Branch_ID(Branch_ID_sig) ,	// input  Branch_ID_sig
	.MemRead_ID(MemRead_ID_sig) ,	// input  MemRead_ID_sig
	.MemtoReg_ID(MemtoReg_ID_sig) ,	// input  MemtoReg_ID_sig
	.MemWrite_ID(MemWrite_ID_sig) ,	// input  MemWrite_ID_sig
	.RegWrite_ID(RegWrite_ID_sig) ,	// input  RegWrite_ID_sig
	.ALUSrc_ID(ALUSrc_ID_sig) ,	// input  ALUSrc_ID_sig
	.PC_EX(PC_EX_sig) ,	// output [size-1:0] PC_EX_sig
	.imm_EX(imm_EX_sig) ,	// output [size-1:0] imm_EX_sig
	.read_data1_EX(read_data1_EX_sig) ,	// output [size-1:0] read_data1_EX_sig
	.read_data2_EX(read_data2_EX_sig) ,	// output [size-1:0] read_data2_EX_sig
	.wrin_EX(wrin_EX_sig) ,	// output [4:0] wrin_EX_sig
	.ALUOp_EX(ALUOp_EX_sig) ,	// output [3:0] ALUOp_EX_sig
	.entrada_alu_control_EX(entrada_alu_control_EX_sig) ,	// output [3:0] entrada_alu_control_EX_sig
	.AuipcLui_EX(AuipcLui_EX_sig) ,	// output [1:0] AuipcLui_EX_sig
	.Branch_EX(Branch_EX_sig) ,	// output  Branch_EX_sig
	.MemRead_EX(MemRead_EX_sig) ,	// output  MemRead_EX_sig
	.MemtoReg_EX(MemtoReg_EX_sig) ,	// output  MemtoReg_EX_sig
	.MemWrite_EX(MemWrite_EX_sig) ,	// output  MemWrite_EX_sig
	.RegWrite_EX(RegWrite_EX_sig) ,	// output  RegWrite_EX_sig
	.ALUSrc_EX(ALUSrc_EX_sig) 	// output  ALUSrc_EX_sig
);

defparam id_ex_inst.size = 32;
